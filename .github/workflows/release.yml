name: Release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target.name }} package
    runs-on: ${{ matrix.target.os }}
    strategy:
      matrix:
        target:
          [
            { name: x86_64-unknown-linux-gnu, os: ubuntu-latest },
            { name: aarch64-apple-darwin, os: macos-latest },
            {
              name: x86_64-pc-windows-msvc,
              os: windows-latest,
              extension: .exe,
            },
          ]
    steps:
      - name: Fetch latest code
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        run: rustup target add ${{ matrix.target.name }}
      - name: Install OpenCL (Linux)
        if: matrix.target.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install opencl-headers ocl-icd-opencl-dev -y
      - uses: Jimver/cuda-toolkit@v0.2.14
        if: matrix.target.os == 'windows-latest'
        id: cuda-toolkit
        with:
          cuda: '12.3.2'
          method: "local"
          sub-packages: '["nvcc","opencl"]'
      - name: Set RUSTFLAGS (Windows)
        if: matrix.target.os == 'windows-latest'
        run: echo "RUSTFLAGS=-L ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/lib/x64" >> $GITHUB_ENV
      - name: Build
        run: cargo build --profile ci-release --locked --target ${{ matrix.target.name }}
      - name: Prepare artifact
        run: |
          cp target/${{ matrix.target.name }}/ci-release/collider${{ matrix.target.extension }} collider-${{ matrix.target.name }}${{ matrix.target.extension }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          name: collider-${{ matrix.target.name }}${{ matrix.target.extension }}
          path: collider-${{ matrix.target.name }}${{ matrix.target.extension }}
          retention-days: 1  
          
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    needs: [build]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Hash
        run: |
          mkdir -p artifacts
          mv collider-*/* artifacts/
          cd artifacts
          sha256sum * | tee ../SHA256
          md5sum * | tee ../MD5
          mv ../SHA256 .
          mv ../MD5 .
      - name: Publish
        uses: softprops/action-gh-release@v2
        with:
          discussion_category_name: Announcements
          generate_release_notes: true
          files: artifacts/*

#  No need publish on crates.io because we are using GitHub releases
#  publish-on-crates-io:
#    name: Publish on crates.io
#    runs-on: ubuntu-latest
#    steps:
#      - name: Fetch latest code
#        uses: actions/checkout@v4
#      - name: Login
#        run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}
#      - name: Publish
#        run: cargo publish --locked